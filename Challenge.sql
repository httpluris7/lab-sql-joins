USE sakila

-- List the number of films per category.

SELECT
c.name AS category,
COUNT(f.film_id) AS film_count
FROM film f
JOIN film_category fc ON f.film_id = fc.film_id
JOIN category c ON fc.category_id = c.category_id
GROUP BY c.name
ORDER BY film_count DESC;


-- Retrieve the store ID, city, and country for each store.

SELECT
s.store_id,
ci.city,
co.country
FROM store s
JOIN address a ON s.address_id = a.address_id
JOIN city ci ON a.city_id = ci.city_id
JOIN country co ON ci.country_id = co.country_id;

-- Calculate the total revenue generated by each store in dollars.

SELECT 
s.store_id,
ROUND(SUM(p.amount), 2) AS total_revenue
FROM payment p
JOIN staff st ON p.staff_id = st.staff_id
JOIN store s ON st.store_id = s.store_id
GROUP BY s.store_id;


-- Determine the average running time of films for each category.
SELECT 
c.name AS category,
ROUND(AVG(f.length), 2) AS avg_running_time
FROM film f
JOIN film_category fc ON f.film_id = fc.film_id
JOIN category c ON fc.category_id = c.category_id
GROUP BY c.name
ORDER BY avg_running_time DESC;



-- Identify the film categories with the longest average running time.
SELECT 
c.name AS categoría,
AVG(f.length) AS duracion_media
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f ON fc.film_id = f.film_id
GROUP BY c.category_id
ORDER BY duracion_media DESC;


-- Display the top 10 most frequently rented movies in descending order.
SELECT 
f.film_id,
f.title,
COUNT(r.rental_id) AS veces_alquilada
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
GROUP BY f.film_id
ORDER BY veces_alquilada DESC
LIMIT 10;


-- Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT 
CASE 
WHEN EXISTS (
SELECT 1
FROM inventory i
JOIN film f ON i.film_id = f.film_id
LEFT JOIN rental r 
ON i.inventory_id = r.inventory_id
AND r.return_date IS NULL
WHERE f.title    = 'Academy Dinosaur'
AND i.store_id = 1
AND r.rental_id IS NULL
) 
THEN 'Sí, hay copia disponible'
ELSE 'No, no está disponible'
END AS disponibilidad;


-- Provide a list of all distinct film titles, along with their availability status in the inventory.
-- Include a column indicating whether each title is 'Available' or 'NOT available.' 
-- Note that there are 42 titles that are not in the inventory, 
-- and this information can be obtained using a CASE statement combined with IFNULL."

SELECT 
f.title,
CASE 
WHEN IFNULL(inv.cnt, 0) = 0 THEN 'NOT available'
ELSE 'Available'
END AS estado
FROM film f
LEFT JOIN (
SELECT film_id, COUNT(*) AS cnt
FROM inventory
GROUP BY film_id
) AS inv ON f.film_id = inv.film_id
ORDER BY f.title;